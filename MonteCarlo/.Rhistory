mtcars$am <- factor(mtcars$am)
levels(mtcars$am) <- c("automatic", "manual")
nrow(mtcars[mtcars$am == "automatic",])
nrow(mtcars[mtcars$am == "manual",])
library(ggplot2)
library(GGally)
ggpairs(data = mtcars, aes(colour = factor(am)), columns = c(1, 2, 4, 6, 9))
# Simulation
set.seed(1)
n <- 100
t <- rep(c(0, 1), c(n / 2, n / 2))
x <- runif(n)
beta0 <- 0; beta1 <- 2; tau <- 1; sigma <- 0.2
y <- beta0 + beta1 * x + tau * t + rnorm(n, ds = sigma)
y <- beta0 + beta1 * x + tau * t + rnorm(n, sd = sigma)
library(ggplot2)
ggplot(data = dataframe(x = x, y = y, t = t), aes(x = x, y = y)) +
geom_point()
ggplot(data = data.frame(x = x, y = y, t = t), aes(x = x, y = y)) +
geom_point()
ggplot(data = data.frame(x = x, y = y, t = t), aes(x = x, y = y)) +
geom_point(aes(colour = t))
ggplot(data = data.frame(x = x, y = y, t = as.integer(t)), aes(x = x, y = y)) +
geom_point(aes(colour = t))
ggplot(data = data.frame(x = x, y = y, t = as.integer(t)), aes(x = x, y = y)) +
geom_point(aes(colour = t))
ggplot(data = data.frame(x = x, y = y, t = t), aes(x = x, y = y)) +
geom_point(aes(colour = t))
typeof(t)
ggplot(data = data.frame(x = x, y = y, t = factor(t)), aes(x = x, y = y)) +
geom_point(aes(colour = t))
ggplot(data = data.frame(x = x, y = y, t = factor(t)), aes(x = x, y = y)) +
geom_point(aes(colour = t)) + geom_smooth(method = "lm", se = FALSE)
ggplot(data = data.frame(x = x, y = y, t = factor(t)), aes(x = x, y = y)) +
geom_point(aes(colour = t)) + geom_smooth(aes(colour = t), method = "lm", se = FALSE)
ggplot(data = data.frame(x = x, y = y, t = factor(t)), aes(x = x, y = y)) +
geom_point(aes(colour = t)) + geom_smooth(method = "lm", se = FALSE, colour = black)
ggplot(data = data.frame(x = x, y = y, t = factor(t)), aes(x = x, y = y)) +
geom_point(aes(colour = t)) + geom_smooth(method = "lm", se = FALSE, colour = "black")
ggplot(data = data.frame(x = x, y = y, t = factor(t)), aes(x = x, y = y)) +
geom_point(aes(colour = t)) + geom_smooth(method = "lm", se = FALSE, colour = "black") +
geom_abline(slope = beta1, intercept = beta0)
ggplot(data = data.frame(x = x, y = y, t = factor(t)), aes(x = x, y = y)) +
geom_point(aes(colour = t)) + geom_smooth(method = "lm", se = FALSE, colour = "black") +
geom_abline(slope = beta1, intercept = beta0) +
geom_abline(slope = beta1, intercept = beta0 + tau)
ggplot(data = data.frame(x = x, y = y, t = factor(t)), aes(x = x, y = y)) +
geom_point(aes(colour = t)) + geom_smooth(method = "lm", se = FALSE, colour = "black") +
geom_abline(slope = beta1, intercept = beta0) +
geom_abline(slope = beta1, intercept = beta0 + tau) +
geom_smooth(method = "lm", aes(colour = t), colour = "black")
ggplot(data = data.frame(x = x, y = y, t = factor(t)), aes(x = x, y = y)) +
geom_point(aes(colour = t)) + geom_smooth(method = "lm", se = FALSE, colour = "black") +
geom_abline(slope = beta1, intercept = beta0) +
geom_abline(slope = beta1, intercept = beta0 + tau) +
geom_smooth(method = "lm", aes(colour = t), se = FALSE)
ggplot(data = data.frame(x = x, y = y, t = factor(t)), aes(x = x, y = y)) +
geom_point(aes(colour = t)) + geom_smooth(method = "lm", se = FALSE, colour = "black") +
geom_abline(slope = beta1, intercept = beta0) +
geom_abline(slope = beta1, intercept = beta0 + tau) +
geom_smooth(method = "lm", formula = "y ~ x", aes(colour = t), se = FALSE)
ggplot(data = data.frame(x = x, y = y, t = factor(t)), aes(x = x, y = y)) +
geom_point(aes(colour = t)) + geom_smooth(method = "lm", se = FALSE, colour = "black") +
geom_abline(slope = beta1, intercept = beta0) +
geom_abline(slope = beta1, intercept = beta0 + tau) +
geom_smooth(method = "lm", formula = "y ~ x + t", aes(colour = t), se = FALSE)
ggplot(data = data.frame(x = x, y = y, t = factor(t)), aes(x = x, y = y)) +
geom_point(aes(colour = t)) + geom_smooth(method = "lm", se = FALSE, colour = "black") +
geom_abline(slope = beta1, intercept = beta0) +
geom_abline(slope = beta1, intercept = beta0 + tau) +
geom_smooth(method = "lm", formula = "y ~ x + factor(t)", aes(colour = t), se = FALSE)
ggplot(data = data.frame(x = x, y = y, t = factor(t)), aes(x = x, y = y)) +
geom_point(aes(colour = t)) +
geom_smooth(method = "lm", formula = "y ~ x", se = FALSE, colour = "black") +
geom_abline(slope = beta1, intercept = beta0) +
geom_abline(slope = beta1, intercept = beta0 + tau) +
geom_smooth(method = "lm", aes(colour = t), se = FALSE)
ggplot(data = data.frame(x = x, y = y, t = factor(t)), aes(x = x, y = y)) +
geom_point(aes(colour = t)) +
geom_smooth(method = "lm", formula = "y ~ x", se = FALSE, colour = "black") +
geom_abline(slope = beta1, intercept = beta0) +
geom_abline(slope = beta1, intercept = beta0 + tau) +
geom_smooth(method = "lm", formula = "y ~ x + factor(t)", aes(colour = t), se = FALSE)
ggplot(data = data.frame(x = x, y = y, t = factor(t)), aes(x = x, y = y)) +
geom_point(aes(colour = t)) +
geom_smooth(method = "lm", formula = "y ~ x", se = FALSE, colour = "black") +
geom_smooth(method = "lm", formula = "y ~ x + factor(t)", aes(colour = t), se = FALSE)
t <- rep(c(0, 1), each = n / 2)
ggplot(data = data.frame(x = x, y = y, t = factor(t)), aes(x = x, y = y)) +
geom_point(aes(colour = t)) +
geom_smooth(method = "lm", formula = "y ~ x", se = FALSE, colour = "black") +
geom_smooth(method = "lm", formula = "y ~ x + factor(t)", aes(colour = t), se = FALSE)
?geom_line
?geom_smooth
ggplot(data = data.frame(x = x, y = y, t = factor(t)), aes(x = x, y = y)) +
geom_point(aes(colour = t)) +
geom_smooth(method = "lm", se = FALSE, colour = "black") +
geom_smooth(method = "lm", formula = "y ~ x + colour" aes(colour = t), se = FALSE)
ggplot(data = data.frame(x = x, y = y, t = factor(t)), aes(x = x, y = y)) +
geom_point(aes(colour = t)) +
geom_smooth(method = "lm", se = FALSE, colour = "black") +
geom_smooth(method = "lm", formula = "y ~ x + colour" aes(colour = t), se = FALSE)
ggplot(data = data.frame(x = x, y = y, t = factor(t)), aes(x = x, y = y)) +
geom_point(aes(colour = t)) +
geom_smooth(method = "lm", se = FALSE, colour = "black") +
geom_smooth(method = "lm", formula = "y ~ x + t" aes(colour = t), se = FALSE)
ggplot(data = data.frame(x = x, y = y, t = factor(t)), aes(x = x, y = y)) +
geom_point(aes(colour = t)) +
geom_smooth(method = "lm", se = FALSE, colour = "black") +
geom_smooth(method = "lm", formula = "y ~ x + colour", aes(colour = t), se = FALSE)
ggplot(data = data.frame(x = x, y = y, t = factor(t)), aes(x = x, y = y)) +
geom_point(aes(colour = t)) +
geom_smooth(method = "lm", se = FALSE, colour = "black") +
geom_smooth(method = "lm", formula = "y ~ x + t", aes(colour = t), se = FALSE)
ggplot(data = data.frame(x = x, y = y, t = factor(t)), aes(x = x, y = y)) +
geom_point(aes(colour = t)) +
geom_smooth(method = "lm", se = FALSE, colour = "black") +
geom_smooth(method = "lm", formula = "y ~ x", aes(colour = t), se = FALSE)
n <- 1000
set.seed(101101)
x <- runif(n, 0, 1)
y <- 1 + 0.5 * x + rnorm(n, sd = 0.3)
library(ggplot2)
ggplot(data = data.frame(x = x, y = y), aes(x = x, y = y)) +
geom_point()
set.seed(101101)
x <- runif(n, 0, 1)
y <- 1 + 0.5 * x + rnorm(n, sd = 0.2)
library(ggplot2)
ggplot(data = data.frame(x = x, y = y), aes(x = x, y = y)) +
geom_point()
set.seed(101101)
x <- runif(n, 0, 1)
y <- 1 + 1.5 * x + rnorm(n, sd = 0.2)
library(ggplot2)
ggplot(data = data.frame(x = x, y = y), aes(x = x, y = y)) +
geom_point()
n <- 1000
set.seed(101101)
x <- runif(n, 0, 1)
y <- 1 + 2 * x + rnorm(n, sd = 0.2)
library(ggplot2)
ggplot(data = data.frame(x = x, y = y), aes(x = x, y = y)) +
geom_point()
y <- 1 + 2 * x + rnorm(n, sd = 0.5)
ggplot(data = data.frame(x = x, y = y), aes(x = x, y = y)) +
geom_point()
set.seed(101101)
x <- runif(n, 0, 1)
y <- 1 + 2 * x + rnorm(n, sd = 0.5)
library(ggplot2)
ggplot(data = data.frame(x = x, y = y), aes(x = x, y = y)) +
geom_point()
x <- rnorm(n, mean = 5, sd = 1)
y <- 1 + 2 * x + rnorm(n, sd = 0.5)
ggplot(data = data.frame(x = x, y = y), aes(x = x, y = y)) +
geom_point()
x <- rnorm(n, mean = 5, sd = 1)
y <- 1 + 2 * x + rnorm(n, sd = 1)
ggplot(data = data.frame(x = x, y = y), aes(x = x, y = y)) +
geom_point()
install.packages("kernlab")
library(caret)
library(kernlab)
data(spam)
inTrain <- createDataPartition(y = spam$type, p = 0.75, list = FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
dim(testing)
set.seed(32323)
modelFit <- train(type ~ . , data = training,  method = "glm")
modelFit
modelFit$finalModel
prediction <- predict(modelFit, newdata = testing)
predictions
prediction
confusionMatrix(prediction, testing$Type)
confusionMatrix(predictions, testing$Type)
confusionMatrix(prediction, testing$type)
preprop <- preProcess(training, method = c("centre", "scale"))
preprop <- preProcess(training, method = c("center", "scale"))
head(preprop)
preprop
library(caret)
data(faithful)
inTrain <- createDataPartition(y = faithful$waiting, p = 0.5, list = FALSE)
trainFaith <- faithful[inTrain,]
testFaith<-faithful[-inTrain,]
lm1 <- lm(eruptions ~ waiting, data = trainFaith)
with(trainFaith, plot(waiting, eruptions,
pch = 19, col = "blue",
xlab = "Waiting Time",
ylab = "Eruption Duration"))
lm1 <- lm(eruptions ~ waiting, data = trainFaith)
summary(lm1)
with(trainFaith, lines(waiting, lm1$fitted, lwd = 1))
with(trainFaith, lines(waiting, lm1$fitted, lwd = 2))
with(trainFaith, lines(waiting, lm1$fitted, lwd = 3))
coef(lm1)[1] + coef(lm2)[2] * 80
coef(lm1)[1] + coef(lm1)[2] * 80
predict(lm1, newdata)
newdata <- data.frame(waiting = 80)
predict(lm1, newdata)
par(mfrow = c(1, 2))
par(mfrow = c(1, 2))
with(trainFaith, plot(waiting, eruptions,
pch = 19, col = "blue",
xlab = "Waiting",
ylab = "Duration"))
with(trainFaith, lines(waiting, lm1$fitted, lwd = 3))
with(testFaith, plot(waiting, eruptions,
pch = 19, col = "red",
xlab = "Waiting",
ylab = "Duration"))
with(testFaith, lines(waiting, predict(lm1, newdata = testFaith), lwd = 3))
# calculate RMSE on training
sqrt(sum(lm1$fitted - trainFaith$eruptions) ^ 2)
# Calculate RMSE on test
sqrt(sum((predict(lm1, newdata = testFaith) - testFaith$eruptions) ^2))
par(mfrow = c(1, 1))
pred1 <- predict(lm1, newdata = testFaith, interval = "prediction")
ord <- order(testFaith$waiting)
plot(testFaith$waiting, testFaith$eruptions, pch = 19, col = "blue")
plot(testFaith$waiting, testFaith$eruptions, pch = 19, col = "blue")
matlines(testFaith$waiting[ord], pred1[ord,],
type = "l", col = c(1, 2, 2),
lty = c(1, 1, 1), lwd = 3)
modFit <- train(eruptions ~ waiting, data = trainFaith, method = "lm")
summary(modFit$finalModel)
install.packages("ISLR")
library(ISLR)
library(ggplot2)
library(caret)
data(Wage)
Wage <- subset(Wage, select = -c(logwage))
summary(Wage)
inTrain <- createDataPartition(y = Wage$wage, p = 0.70, list = FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
dim(testing)
featurePlot(x = training[,c("age", "education", "jobclass")], y = training$wage, plot = "pairs")
qplot(age, wage, data = training)
qplot(age, wage, colour = jobclass, data = training)
qplot(age, wage, colour = education, data = training)
modFit <- train(wage ~ age + jobclass + education, method = "lm", data = training)
finMod <- modFit$finalModel
print(modFit)
plot(finMod, 1, pch = 19, cex = 0.5, col = "#00000010")
qplot(finMod$fitted, finMod$residuals, colour = race, data = training)
plot(finMod$residuals, pch = 19)
pred <- predict(modFit, testing)
qplot(wage, pred, colour = year, data = testing)
qplot(wage, pred, colour = year, data = testing, size = I(3))
modFitAll <- train(wage ~ . , data = training, method = "lm")
pred <- predict(modFitAll, testing)
qplot(wage, pred, data = testing)
# Let us predict the species of Iris
library(caret)
# Let us predict the species of Iris
library(ggplot2)
library(caret)
data(iris)
names(iris)
table(iris@Species)
table(iris$Species)
# Splitting the data set
inTrain <- createDataPartition(y = iris$Species, p = 0.70, list = FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
#
qplot(Petal.Width, Sepal.Width, colour = Species, data = training)
modFit <- train(Species ~ . , method = "rpart", data = training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE, main = "Classification Tree")
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = 0.8)
library(rattle)
predict(modFit, newdata = testing)
?confusionMatrix()
?confusionMatrix(testing$Species, predict(modFit, newdata = testing))
confusionMatrix(testing$Species, predict(modFit, newdata = testing))
# Splitting the data set
inTrain <- createDataPartition(y = iris$Species, p = 0.70, list = FALSE)
install.packages("leaflet")
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
my_map <- my_map %>% addMarkers(lat = 39.2980803, lng = -76.5898801,
popup = "Jeff Leek's Office")
my_map
my_home <- leaflet() %>%
addTiles() %>%
addMarkers(lat = 43.7190873, lng = 10.9529608,
popup = "Where my home is")
my_home
my_house <- leaflet() %>%
addTiles() %>%
addMarkers(lat = 52.0054520, lng = -0.7509779,
popup = "Where my home is")
my_house
df <- data.frame(lat = c(43.7190873, 52.0054520),
lng = c(10.9529608, -0.7509779),
popup = c("Where I was born", "Where I live"))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers()
govCoordinates %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = govIcon)
govIcon <- makeIcon(
iconUrl = "~/Desktop/Codes in R/royal-coat-of-arms-small.png",
iconWidth = 31 * 215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, inconAnchorY = 16
)
govIcon <- makeIcon(
iconUrl = "~/Desktop/Codes in R/royal-coat-of-arms-small.png",
iconWidth = 31 * 215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, iconAnchorY = 16
)
govCoordinates <- data.frame(lat = 51.5036870, lng = -0.1279575)
govCoordinates %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = govIcon)
govIcon <- makeIcon(
iconUrl = "~/Desktop/Codes in R/royal-coat-of-arms-small.png",
iconWidth = 35 * 215/230, iconHeight = 35,
iconAnchorX = 35*215/230/2, iconAnchorY = 17.5
)
govCoordinates <- data.frame(lat = 51.5036870, lng = -0.1279575)
govCoordinates %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = govIcon)
df <- data.frame(lat = c(43.7190873, 52.0054520),
lng = c(10.9529608, -0.7509779))
popups <- c("Where I was born", "Where I live")
df %>%
leaflet() %>%
addTiles() %>%
addMarkers(popup = popups)
# Adding circles
md_cities <- data.frame(
name = c("Baltimore", "Frederick", "Rockville", "Gaithersburg",
"Bowie", "Hagerstown", "Annapolis", "College Park",
"Salisbury", "Laurel"),
pop = c(619493, 66169, 62334, 61045, 55232,
39890, 38880, 30587, 30484, 25346),
lat = c(39.2920592, 39.4143921, 39.0840, 39.1434, 39.0068,
39.6418, 38.9784, 38.9897, 38.3607, 39.0993),
lng = c(-76.6077852, -77.4204875, -77.1528, -77.2014, -76.7791,
-77.7200, -76.4922, -76.9378, -75.5994, -76.8483))
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(md_cities$pop) * 30)
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 10, radius = sqrt(md_cities$pop) * 30)
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 5, radius = sqrt(md_cities$pop) * 30)
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 3, radius = sqrt(md_cities$pop) * 30)
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 2, radius = sqrt(md_cities$pop) * 30)
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(md_cities$pop) * 30)
leaflet() %>%
addTiles() %>%
addRectangles(lat1 = 37.3858, lng1 = -122.0595,
lat2 = 37.3890, lng2 = -122.06.25)
leaflet() %>%
addTiles() %>%
addRectangles(lat1 = 37.3858, lng1 = -122.0595,
lat2 = 37.3890, lng2 = -122.0625)
leaflet() %>%
addTiles() %>%
addRectangles(weight = 1,
lat1 = 37.3858, lng1 = -122.0595,
lat2 = 37.3890, lng2 = -122.0625)
leaflet() %>%
addTiles() %>%
addRectangles(weight = 2,
lat1 = 37.3858, lng1 = -122.0595,
lat2 = 37.3890, lng2 = -122.0625)
set.seed(1)
x <- rnorm(100)
x <- as.tx(x)
x <- as.ts(x)
plot(x)
head(x)
typeof(x)
plot(x)
install.packages("devtools")
library(devtools)
install.packages("plotly")
plotly(mtcars, x = hp, y = mpg, mode = "markers", color = wt, text = paste("Weight:", wt))
plotly(mtcars, x = hp, y = mpg, mode = "markers", color = wt, text = paste("Weight:", wt))
plot_ly(mtcars, x = hp, y = mpg, mode = "markers", color = wt, text = paste("Weight:", wt))
library(plotly)
plot_ly(mtcars, x = hp, y = mpg, mode = "markers", color = wt, text = paste("Weight:", wt))
plot_ly(mtcars, x = hp, y = mpg, mode = "markers", color = wt, text = paste("Weight:", wt))
head(mtcars)
plot_ly(mtcars, x = hp, y = mpg, mode = "markers", color = wt, text = paste("Weight:", wt))
knitr::opts_chunk$set(echo = FALSE)
library(plotly)
plot_ly(mtcars, x = hp, y = mpg, mode = "markers", color = wt, text = paste("Weight:", wt))
data(mtcars))
data(mtcars)
plot_ly(mtcars, x = hp, y = mpg, mode = "markers", color = wt, text = paste("Weight:", wt))
plot_ly(mtcars, x = wt, y = mpg, mode = "markers")
plot_ly(mtcars, x = mtcars$wt, y = mpg, mode = "markers")
plot_ly(mtcars, x = mtcars$wt, y = mpg, mode = "markers")
data("EuStockMarkets")
library(dplyr)
library(plotly)
data("EuStockMarkets")
plot_ly(stocks, x = ~time, y = ~price, color = ~index, type = "scatter", mode = "lines")
plot_ly(stocks, x = ~time, y = ~price,
color = ~index, type = "scatter", mode = "lines")
plot_ly(stocks, x = ~time, y = ~price,
color = ~index, type = "scatter", mode = "lines")
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
```{r, eval = FALSE}
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
library(tidyr)
st
stocks <- as.data.frame(EuStockMarkets) %>%
gather(index, price) %>%
mutate(time = rep(time(EuStockMarkets), 4))
plot_ly(stocks, x = ~time, y = ~price,
color = ~index, type = "scatter", mode = "lines")
mystocks <- stocks %>%
select(index %in% c("DAX", "FTSE"))
mystocks <- stocks %>%
select(stocks$index %in% c("DAX", "FTSE"))
mystocks <- stocks %>%
filter(stocks$index %in% c("DAX", "FTSE"))
plot_ly(mystocks, x = ~time, y = ~price,
color = ~index, type = "scatter", mode = "lines")
plot_ly(stocks, x = ~time, y = ~price,
color = ~index, type = "scatter", mode = "lines")
## Second plotly
```{r, fig.cap = "CAC, DAX, FTSE and SMI time series", echo = FALSE}
plot_ly(stocks, x = ~time, y = ~price,
color = ~index, type = "scatter", mode = "lines")
```{r, fig.cap = "DAX and FTSE time series", echo = FALSE, warning = FALSE}
shiny::runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
shiny::runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
shiny::runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
shiny::runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
shiny::runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
?runif
shiny::runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
shiny::runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
shiny::runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
shiny::runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
shiny::runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
shiny::runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
shiny::runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
install.packages("rsconnect")
install.packages("rsconnect")
rsconnect::setAccountInfo(name='9majed-andrea-carpignani',
token='879F8739871BBE55E2354F18E8ADBD3B',
secret='<SECRET>')
rsconnect::setAccountInfo(name='9majed-andrea-carpignani',
token='879F8739871BBE55E2354F18E8ADBD3B',
secret='As4xGI5WW9y4Xto8+SpyilFxjyA6KmXRQi96MUKw')
rsconnect::deployApp("~/Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo/")
shiny::runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
shiny::runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
runApp('Desktop/Coursera/Developing Data Products/Final PA/MonteCarlo')
